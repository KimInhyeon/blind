<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ksinfo.blind.company.mapper.CompanyAnnualIncomeMapper">
	<select id="getJobGroupListInCompany" resultType="com.ksinfo.blind.company.vo.CompanyJobGroupVO">
		SELECT job_group_code AS jobGroupCode,
			job_group_name AS jobGroupName,
			EXISTS(
				SELECT
				FROM blind.salary_rank_mgt AS sa
					INNER JOIN blind.user_mgt AS us USING(user_id)
				WHERE job_group_code = jo.job_group_code
					AND us.company_id = #{companyId}
					AND us.last_generation_flag = '1'
					AND sa.logical_del_flag = '0'
					AND us.logical_del_flag = '0'
			) AS exist
		FROM blind.job_group_mst AS jo
		WHERE logical_del_flag = '0'
	</select>

	<select id="getAnnualIncome" parameterType="com.ksinfo.blind.company.dto.CompanyAnnualIncomeSearchDto"
			resultType="com.ksinfo.blind.company.vo.CompanyAnnualIncomeVO">
		SELECT MIN(salary) AS minAnnualIncome,
			   ROUND(AVG(salary), 0) AS avgAnnualIncome,
			   MAX("blind".salary_rank_mgt.salary) AS maxAnnualIncome
		FROM blind.salary_rank_mgt
			INNER JOIN (
				SELECT user_id, MAX(user_generation)
				FROM blind.user_mgt
				WHERE company_id = #{companyId}
					AND logical_del_flag = '0'
				GROUP BY user_id
			) AS us USING(user_id)
		WHERE logical_del_flag = '0'
		<if test="jobGroupCode neq '00'">
			AND job_group_code = #{jobGroupCode}
		</if>
	</select>

	<select id="getJobGroupListAll" resultType="com.ksinfo.blind.company.vo.CompanyJobGroupVO">
		SELECT job_group_code AS jobGroupCode,
			   job_group_name AS jobGroupName
		FROM blind.job_group_mst
		WHERE logical_del_flag = '0'
	</select>

	<select id="getWorkTypeAll" resultType="com.ksinfo.blind.company.vo.CompanyWorkTypeVO">
		SELECT work_type_name AS workTypeName
		FROM blind.work_type_mst
		WHERE logical_del_flag = '0'
	</select>

	<insert id="setAnnualData" parameterType="java.util.Map">
		insert INTO blind.salary_rank_mgt(
			user_id,
			salary,
			job_group_code,
			years_of_service,
			work_type_code,
			rec_create_user_id, rec_create_date, rec_update_user_id, rec_update_date, logical_del_flag
		) VALUES (
			#{userId},
			#{annualIncome},
			#{selectJob},
			#{selectWorkPeriod},
			#{selectWorkType},
			#{userId}, now(), #{userId}, now(), '0'
		);
	</insert>
	<!--
	<select id="getBusinessTypeNameList" resultType="com.ksinfo.blind.company.vo.CompanyBusinessTypeVO">
		select btm.business_type_name AS businessTypeName
		from blind.business_type_mst as btm
	</select>
	-->

	<select id="getBusinessTypeListExistAIData" resultType="com.ksinfo.blind.company.vo.CompanyBusinessTypeVO">
		select DISTINCT
			btm.business_type_code AS businessTypeCode,
		    btm.business_type_name AS businessTypeName
		from blind.business_type_mst as btm
		Inner Join blind.company_mgt as cm
			on cm.business_type_code = btm.business_type_code
		Inner Join blind.user_mgt as um
			on um.company_id = cm.company_id
		Inner Join blind.salary_rank_mgt as srm
			on srm.user_id = um.user_id
		WHERE btm.logical_del_flag = '0'
	</select>

	<select id="getJobGroupListExistAIData" resultType="com.ksinfo.blind.company.vo.CompanyJobGroupVO">
		select DISTINCT
			jgm.job_group_code AS jobGroupCode,
			jgm.job_group_name AS jobGroupName
		from blind.job_group_mst as jgm
			Inner Join blind.salary_rank_mgt as srm
				on srm.job_group_code = jgm.job_group_code
		WHERE jgm.logical_del_flag = '0'
	</select>

	<select id="getUserBusinessTypeCode" parameterType="long"
			resultType="com.ksinfo.blind.company.vo.CompanyBusinessTypeVO">
		select  cm.business_type_code AS businessTypeCode
		from blind.company_mgt AS cm
		where cm.user_id = #{userId};
	</select>

	<select id="getUserJobGroupCode" parameterType="long"
			resultType="com.ksinfo.blind.company.vo.CompanyJobGroupVO">
		select  srm.job_group_code AS jobGroupCode
		from blind.salary_rank_mgt AS srm
		where srm.user_id = #{userId};
	</select>


	<select id="getAnnualIncomeAndRank" parameterType="java.util.Map"
			resultType="com.ksinfo.blind.company.vo.AnnualIncomeRankVO">
		SELECT	MIN(SRM.salary) AS minAnnualIncome,
				ROUND(AVG(SRM.salary), 0) AS avgAnnualIncome,
				MAX(SRM.salary) AS maxAnnualIncome,
				count(SRM.salary) AS countOfParticipant
		FROM blind.salary_rank_mgt as SRM
		WHERE logical_del_flag = '0'
			AND SRM.job_group_code = #{selectBusinessType} <!-- [메모] 업계를 필터링하는 조건  -->
			AND SRM.job_group_code = #{selectJobGroup} <!-- [메모] 직군를 필터링하는 조건  -->
			<!-- [메모] 근무년수를 필터링하는 조건  -->
			<choose>
				<when test="#{countOfParticipant} eq 32"> <!-- 메모 32 : '근무년수 전체'  -->
					<!-- 메모 조건이 없으면 자동으로 전체를 대상으로 하게 된다.-->
				</when>
				<when test="#{countOfParticipant} eq 31"> <!-- 메모 31 : '30년 이상' -->
					AND SRM.years_of_service >=30
				</when>
				<otherwise>
					AND SRM.years_of_service = #{countOfParticipant}
				</otherwise>
			</choose>
	</select>

</mapper>