<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ksinfo.blind.mytask.mapper.BookmarkMapper">
	<select id="bookmarkList" parameterType="long" resultType="com.ksinfo.blind.mytask.dto.BookmarkDto">
		SELECT bm.board_id AS boardId
			, bm.board_topic_name AS boardTopicName
			, pm.post_id AS postId
			, pm.post_title AS postTitle
			, pm.post_contents AS postContents
			, um_name.inner_usernickname AS userNickName
			, cm_name.company_id AS companyId
			, cm_name.company_name AS companyName
			, TO_CHAR(pm.post_create_date, 'MM.DD') AS createDate
			, pm.post_create_date AS order_createDate
			, rank.post_file_url AS postFileUrl
			, TRIM(TO_CHAR(pci.post_count, '999,999,999,999')) AS postCount
			, TRIM(TO_CHAR(COALESCE(COUNT(DISTINCT pri.post_recommend_id), 0), '999,999,999,999')) AS recommendCount
			, TRIM(TO_CHAR(COALESCE(COUNT(DISTINCT rm.reply_id), 0), '999,999,999,999')) AS replyCount
			, COUNT(DISTINCT CASE WHEN pri.user_id = 1 THEN 1 END) AS myRecommend
			, bmm.rec_update_date AS bookmarkCreateDate
		FROM blind.post_mgt pm
			INNER JOIN blind.bookmark_mgt bmm
				ON pm.post_id = bmm.post_id
			INNER JOIN blind.board_mgt bm
				ON pm.board_id = bm.board_id
			INNER JOIN blind.post_count_inf pci
				ON pm.post_id = pci.post_id
			LEFT OUTER JOIN (
				SELECT pfm.post_id
					, pfm.post_file_url
					, pfm.rec_create_date
					, ROW_NUMBER() OVER (PARTITION BY pfm.post_id ORDER BY pfm.rec_create_date ASC) AS rn
				FROM blind.post_file_mgt pfm
					INNER JOIN blind.bookmark_mgt bmm
						ON bmm.post_id = pfm.post_id
			) AS rank
				ON pm.post_id = rank.post_id AND rank.rn = 1
			LEFT OUTER JOIN blind.post_recommend_inf pri
				ON pm.post_id = pri.post_id AND pri.post_recommend_flag = '0'
			LEFT OUTER JOIN blind.reply_mgt rm
				ON pm.post_id = rm.post_id AND rm.logical_del_flag = '0'
			INNER JOIN (
				SELECT inner_um.user_id AS user_id
					, inner_cm.company_name AS company_name
					, inner_cm.company_id AS company_id
				FROM blind.user_mgt inner_um
					LEFT JOIN
				blind.company_mgt inner_cm
						ON
						inner_cm.company_id = inner_um.company_id
				WHERE inner_um.last_generation_flag = '1'
					AND inner_um.logical_del_flag = '0'
			) cm_name ON pm.user_id = cm_name.user_id
			INNER JOIN (
				SELECT inner_pm.post_id AS inner_postId
					, inner_um.user_nickname AS inner_userNickName
					, inner_um.user_id AS inner_userId
				FROM blind.user_mgt inner_um
					LEFT JOIN
				blind.post_mgt inner_pm
						ON
						inner_um.user_id = inner_pm.user_id
				WHERE inner_um.last_generation_flag = '1'
					AND inner_um.logical_del_flag = '0'
			) um_name
				ON bmm.post_id = um_name.inner_postId
		WHERE bmm.user_id = #{userId}
			AND bmm.logical_del_flag = '0'
		GROUP BY bm.board_id
				, bm.board_topic_name
				, pm.post_id
				, pm.post_title
				, pm.post_contents
				, um_name.inner_usernickname
				, cm_name.company_id
				, cm_name.company_name
				, pm.post_create_date
				, rank.post_file_url
				, pci.post_count
				, bmm.rec_update_date
		ORDER BY bmm.rec_update_date DESC
		FETCH FIRST 30 ROWS ONLY;
	</select>

	<select id="searchBookmark" parameterType="hashmap" resultType="com.ksinfo.blind.mytask.dto.BookmarkDto">
		SELECT bmm.bookmark_id AS bookmarkId
			, bmm.user_id AS userId
			, bmm.logical_del_flag AS logicalDelFlag
		FROM blind.bookmark_mgt bmm
		WHERE bmm.post_id = #{postId}
			AND bmm.user_id = #{userId};
	</select>

	<insert id="insertBookmark">
		INSERT INTO blind.bookmark_mgt (
			post_id, user_id, bookmark_create_date, bookmark_update_date, rec_create_user_id,
			rec_create_date, rec_update_user_id, rec_update_date, logical_del_flag
		) VALUES (
			#{postId}, #{userId}, NOW(), NOW(), #{userId},
			NOW(), #{userId}, NOW(), '0'
		);
	</insert>

	<update id="updateBookmark" parameterType="com.ksinfo.blind.mytask.dto.BookmarkDto">
		UPDATE blind.bookmark_mgt
<<<<<<< HEAD
		SET rec_update_date = now(), rec_update_user_id = #{userId},logical_del_flag =
			CASE WHEN logical_del_flag='0' THEN '1'
				 WHEN logical_del_flag='1' THEN '0'
				END
		WHERE bookmark_id = #{bookmarkId};
	</update>

	<!-- 신규북마크 추가 SQL(2021-09-07추가) -->
	<insert id="insertBookmark" parameterType="java.util.Map" >
		INSERT INTO blind.bookmark_mgt(
			bookmark_id,
			post_id,
			user_id,
			bookmark_create_date,
			bookmark_update_date,
			rec_create_user_id,
			rec_create_date,
			rec_update_user_id,
			rec_update_date,
			logical_del_flag
		)VALUES(
			default, 	--bookmark_id,
		   	#{postId},	--post_id,
			#{userId},	--user_id,
			now(),		--bookmark_create_date,
			now(),		--bookmark_update_date,
			#{userId},	--rec_create_user_id,
			now(),		--rec_create_date,
			#{userId},	--rec_update_user_id,
			now(),		--rec_update_date,
			1			--logical_del_flag(유저가 북마크로 설정하기에 최초생성시 초기값을 1으로 설정.)
		)
	</insert>

=======
		SET bookmark_update_date = NOW(),
			rec_update_date = NOW(),
			rec_update_user_id = #{userId},
			logical_del_flag = #{logicalDelFlag}
		WHERE bookmark_id = #{bookmarkId};
	</update>

>>>>>>> changju.lee
	<select id="searchPostRecommend" parameterType="hashmap" resultType="com.ksinfo.blind.mytask.dto.BookmarkDto">
		SELECT pri.post_recommend_id AS postRecommendId
			, pri.user_id AS userId
			, pri.post_id AS postId
			, pri.post_recommend_flag AS postRecommendFlag
		FROM blind.post_recommend_inf pri
		WHERE pri.post_id = #{postId}
			AND pri.user_id = #{userId};
	</select>

	<insert id="insertPostRecommend" parameterType="hashmap">
		INSERT INTO blind.post_recommend_inf(
			post_id, user_id, post_recommend_date, post_recommend_flag
		) VALUES (
			#{postId}, #{userId}, NOW(), '0'
		);
	</insert>

	<update id="updatePostRecommend" parameterType="hashmap">
		UPDATE blind.post_recommend_inf
		SET post_recommend_date = NOW(),
			post_recommend_flag = CASE WHEN post_recommend_flag = '0' THEN '1' ELSE '0' END
		WHERE post_recommend_id = #{postRecommendId};
	</update>
</mapper>