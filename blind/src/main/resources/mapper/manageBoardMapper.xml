<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ksinfo.blind.manage.mapper.BoardMapper">
	<select id="getBoardList" resultType="com.ksinfo.blind.manage.vo.BoardVO">
		SELECT
			board_id AS boardId,
			board_topic_name AS boardTopicName,
			board_order AS boardOrder,
			closed_flag AS closedFlag,
			anonymous_flag AS anonymousFlag
		FROM blind.board_mgt
		WHERE logical_del_flag = '0'
			AND closed_flag = #{closedFlag}
		<if test="anonymousFlag neq '2'">
			AND anonymous_flag = #{anonymousFlag}
		</if>
		ORDER BY board_order;
	</select>

	<select id="getLastOrder" resultType="_int">
		SELECT COUNT(*) FROM blind.board_mgt WHERE logical_del_flag = '0' AND closed_flag = '0';
	</select>
<!--
CREATE FUNCTION blind.create_board(
	new_name VARCHAR(30), new_order INTEGER, new_flag CHAR(1), user_id BIGINT
) RETURNS BIGINT AS $$
	DECLARE
		new_board_id BIGINT;
		now TIMESTAMP := now();
	BEGIN
		INSERT INTO blind.board_mgt VALUES (
			DEFAULT,
			new_name,
			new_order,
			'0',
			new_flag,
			now,
			now,
			user_id,
			now,
			user_id,
			now,
			'0'
		) RETURNING board_id INTO new_board_id;
		UPDATE blind.board_mgt
		SET	board_order = board_order + 1,
			board_update_date = now,
			rec_update_user_id = user_id,
			rec_update_date = now
		WHERE board_order >= new_order
			AND closed_flag = '0' AND board_id <> new_board_id AND logical_del_flag = '0';
		RETURN new_board_id;
	END;
$$ LANGUAGE plpgsql;
-->
	<select id="createBoard" parameterType="com.ksinfo.blind.manage.dto.BoardCreateDto" resultType="_long" statementType="CALLABLE">
		{CALL blind.create_board(
			#{boardTopicName}, #{boardOrder}, #{anonymousFlag}, #{userId}
		)}
	</select>
<!--
CREATE PROCEDURE blind.update_board(
	origin_id BIGINT, new_name VARCHAR(30), new_order INTEGER,
	new_closed CHAR(1), new_anonymous CHAR(1), user_id BIGINT
) LANGUAGE plpgsql AS $$
	DECLARE
		now TIMESTAMP := now();
		old_order INTEGER;
	BEGIN
		IF new_closed = '1' THEN
			UPDATE blind.board_mgt
			SET	board_order = board_order - 1,
				board_update_date = now,
				rec_update_user_id = user_id,
				rec_update_date = now
			WHERE board_order >= new_order
				AND closed_flag = '0' AND board_id <> origin_id AND logical_del_flag = '0';
		ELSIF (SELECT closed_flag FROM blind.board_mgt WHERE board_id = origin_id) = '1' THEN
			UPDATE blind.board_mgt
			SET	board_order = board_order + 1,
				board_update_date = now,
				rec_update_user_id = user_id,
				rec_update_date = now
			WHERE board_order >= new_order
				AND closed_flag = '0' AND board_id <> origin_id AND logical_del_flag = '0';
		ELSE
			SELECT board_order INTO old_order FROM blind.board_mgt WHERE board_id = origin_id;
			IF new_order < old_order THEN
				UPDATE blind.board_mgt
				SET board_order = board_order + 1,
					board_update_date = now,
					rec_update_date = now,
					rec_update_user_id = user_id
				WHERE board_order BETWEEN new_order AND old_order
					AND closed_flag = '0' AND board_id <> origin_id AND logical_del_flag = '0';
			ELSIF new_order > old_order THEN
				UPDATE blind.board_mgt
				SET board_order = board_order - 1,
					board_update_date = now,
					rec_update_date = now,
					rec_update_user_id = user_id
				WHERE board_order BETWEEN old_order AND new_order
					AND closed_flag = '0' AND board_id <> origin_id AND logical_del_flag = '0';
			END IF;
		END IF;
		UPDATE blind.board_mgt
		SET board_topic_name = new_name,
			board_order = new_order,
			closed_flag = new_closed,
			anonymous_flag = new_anonymous,
			board_update_date = now,
			rec_update_date = now,
			rec_update_user_id = user_id
		WHERE board_id = origin_id;
	END;
$$;
-->
	<update id="updateBoard" parameterType="com.ksinfo.blind.manage.dto.BoardUpdateDto" statementType="CALLABLE">
		CALL blind.update_board(
			#{boardId}, #{boardTopicName}, #{boardOrder}, #{closedFlag}, #{anonymousFlag}, #{userId}
		);
	</update>
</mapper>